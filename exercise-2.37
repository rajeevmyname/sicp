#lang sicp
;;-----Function Definition-----------------------------
(define (accumulate op initial sequence)
  (cond ((null? sequence) initial)
        (else (op (car sequence)
                  (accumulate op initial (cdr sequence))))))

(define (accumulate-n op init seqs)
  (cond ((null? (car seqs)) nil)
        (else (cons (accumulate op init (map car seqs))
                    (accumulate-n op init (map cdr seqs))))))

;;-----Exercise 2.37----------------------------------------
(define (dot-product v w)
  (accumulate + 0 (map * v w)))

(define (matrix-*-vector m v)
  (map (lambda (x) (dot-product x v)) m))

(define (transpose mat)
  (accumulate-n cons nil mat))

(define (matrix-*-matrix m n)
  (let ((cols (transpose n)))
    (map (lambda (x) (matrix-*-vector cols x)) m)))

