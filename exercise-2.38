#lang sicp
;;----------Function Definitions-------------------

;; Accumulate
(define (accumulate op initial sequence)
  (cond ((null? sequence) initial)
        (else (op (car sequence)
                  (accumulate op initial (cdr sequence))))))

;;Fold-Right
(define fold-right accumulate)

;;Fold-Left
(define (fold-left op initial sequence)
  (define (iter result seq)
    (cond ((null? seq) result)
          (else (iter (op result (car seq)) (cdr seq)))))
  (iter initial sequence))

;;-----------------Exercise 2.38---------------------
;; Breakdown of the given expressions
(fold-right / 1 (list 1 2 3))
(/ 1 (/ 2 (/ 3 1)))

(fold-left / 1 (list 1 2 3))
(/ (/ (/ 1 1) 2) 3)

(fold-right list nil (list 1 2 3))
(list 1 (list 2 (list 3 nil)))

(fold-left list nil (list 1 2 3))
(list (list (list nil 1) 2) 3)