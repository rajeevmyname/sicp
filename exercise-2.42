#lang sicp
;;----------Function Definition----------------------------------
(define (enumerate-interval a b)
  (cond ((> a b) nil)
        (else (cons a
                    (enumerate-interval (+ a 1) b)))))

(define (accumulate op initial sequence)
  (cond ((null? sequence) initial)
        (else (op (car sequence)
                  (accumulate op initial (cdr sequence))))))

(define (filter pred sequence)
  (cond ((null? sequence) nil)
        ((pred (car sequence)) (cons (car sequence)
                                     (filter pred (cdr sequence))))
        (else (filter pred (cdr sequence)))))

(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

;;--------------Exercise-2.42------------------------
(define empty-board nil)

(define (adjoin-position new-row k rest-of-queens)
  (cons (list new-row k) rest-of-queens))

(define (safe? positions)
  (accumulate (lambda (x y) (and x y)) #t
              (map (lambda (x) (let ((row1 (caar positions))
                                     (column1 (cadar positions))
                                     (row2 (car x))
                                     (column2 (cadr x)))
                                 (not (or (= row1 row2)
                                          (= column1 column2)
                                          (= (abs (- row1 row2))
                                             (abs (- column1 column2)))))))
                   (cdr positions))))

(define (queen board-size)
  (define (queen-cols k)
    (if (= k 0)
        (list empty-board)
        (filter
         (lambda (positions) (safe? positions))
         (flatmap
          (lambda (rest-of-queens)
            (map (lambda (new-row)
                   (adjoin-position new-row k rest-of-queens))
                 (enumerate-interval 1 board-size)))
          (queen-cols (- k 1))))))
  (queen-cols board-size))